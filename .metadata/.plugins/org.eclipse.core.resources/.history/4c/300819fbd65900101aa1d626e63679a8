package ch.hsr.waktu.presentation;
import ch.hsr.waktu.domain.User;
import ch.hsr.waktu.domain.UserProperties;
import ch.hsr.waktu.presentation.juis.Ui_UserDetails;

import com.trolltech.qt.core.QModelIndex;
import com.trolltech.qt.core.Qt;
import com.trolltech.qt.gui.QSplitter;
import com.trolltech.qt.gui.QWidget;


public class UserDetails extends QWidget {

	Ui_UserDetails ui = new Ui_UserDetails();
	private UserModel model = new UserModel();
	private QSplitter splitter;
	private QWidget currWidget = new QWidget();
	
	private SortFilter filter = new SortFilter();
	
	public UserDetails() {
		ui.setupUi(this);
		filter.setDynamicSortFilter(true);
		filter.setSourceModel(model);
		ui.treeView.setModel(filter);
		
		splitter = new QSplitter(Qt.Orientation.Horizontal);
		splitter.addWidget(ui.widget);
		splitter.addWidget(currWidget);
		
		ui.gridLayout.removeWidget(ui.widget);
		ui.gridLayout.addWidget(splitter);
		
		ui.treeView.selectionModel().selectionChanged.connect(this, "selectionChanged()");
		ui.lineEdit.textChanged.connect(this, "textFilterChanged()");
	}
	
	@SuppressWarnings("unused")
	private void selectionChanged() {
		QModelIndex selectedIndex = ui.treeView.selectionModel().selectedIndexes().get(0);
		Object selected = model.indexToValue(selectedIndex);
		Object parent = model.indexToValue(model.parent(selectedIndex));
		if (selected instanceof UserProperties) {
			UserProperties properties = (UserProperties)selected;
			if (properties.getDescription().equals("Daten")) {
				if (currWidget != null) {
					currWidget.setParent(null);
				}
				currWidget = new UserData((User)parent);
				splitter.addWidget(currWidget);
			} else if (properties.getDescription().equals("Stunden")) {
				if (currWidget != null) {
					currWidget.setParent(null);
				}
				currWidget = new Calendar();
				splitter.addWidget(currWidget);
			}
		}
	}
	
	@SuppressWarnings("unused")
	private void textFilterChanged() {
        QRegExp.PatternSyntax syntax;
        int index = filterSyntaxComboBox.currentIndex();
        syntax = (QRegExp.PatternSyntax) filterSyntaxComboBox.itemData(index);

        Qt.CaseSensitivity caseSensitivity;
        if (filterCaseSensitivityCheckBox.isChecked())
            caseSensitivity = Qt.CaseSensitivity.CaseSensitive;
        else
            caseSensitivity = Qt.CaseSensitivity.CaseInsensitive;

        QRegExp regExp = new QRegExp(filterPatternLineEdit.text(),
                                     caseSensitivity, syntax);
        proxyModel.setFilterRegExp(regExp);
	}
	
}
