package ch.hsr.waktu.presentation.view;

import ch.hsr.waktu.controller.PermissionController;
import ch.hsr.waktu.domain.Usr;
import ch.hsr.waktu.presentation.view.jui.Ui_ManagmentWindow;
import ch.hsr.waktu.presentation.view.projectmanagment.ProjectDetails;
import ch.hsr.waktu.presentation.view.usermanagment.UserDetails;

import com.trolltech.qt.gui.QAction;
import com.trolltech.qt.gui.QMainWindow;
import com.trolltech.qt.gui.QToolBar;
 com.trolltech.qt.gui.QToolBar;

public class ManagmentView extends QMainWindow {

	private Ui_ManagmentWindow ui = new Ui_ManagmentWindow();
	private Usr currUsr;
	private ProjectDetails projectDetails;
	private UserDetails userDetails;
	
	public ManagmentView(Usr usr) {
		currUsr = usr;
		
		ui.setupUi(this);
		ui.tabWidget.removeTab(0);
		projectDetails = new ProjectDetails();
		ui.tabWidget.addTab(projectDetails, tr("Projects"));
		userDetails = new UserDetails(); 
		ui.tabWidget.addTab(userDetails, tr("Users"));
		
		QToolBar toolbar = new QToolBar();
		if (PermissionController.getInstance().canAddUser(currUsr)) {
			QAction addUserAction = new QAction(tr("Add User"), toolbar);
			addUserAction.triggered.connect(this, "addUser()");
			toolbar.addAction(addUserAction);
		}
		if (PermissionController.getInstance().canAddProject(currUsr)) {
			QAction addProjectAction = new QAction(tr("Add Project"), toolbar);
			addProjectAction.triggered.connect(this, "addProject()");
			toolbar.addAction(addProjectAction);
		}
		
		addToolBar(toolbar);
	}
	
	@SuppressWarnings("unused")
	private void addUser() {
		ui.tabWidget.setCurrentIndex(1);
		userDetails.addUser();
	}
	
	@SuppressWarnings("unused")
	private void addProject() {
		ui.tabWidget.setCurrentIndex(1);
		
	}
	
}
